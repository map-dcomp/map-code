module protelis:com:bbn:map:resourcetracker

import com.bbn.protelis.networkresourcemanagement.ResourceReport.getShortEstimationWindow
import com.bbn.protelis.networkresourcemanagement.ResourceReport.getLongEstimationWindow

import com.bbn.map.NetworkAvailableServices.mergeNetworkAvailableServices
import com.bbn.map.NetworkAvailableServices.nullNetworkAvailableServices

import com.bbn.map.ap.TotalDemand.nullTotalDemand
import com.bbn.map.ap.TotalDemand.sumTotalDemand


import protelis:coord:sparsechoice
import protelis:coord:accumulation
import protelis:coord:spreading
import protelis:coord:meta
import protelis:lang:utils
import protelis:coord:nonselfstabilizing:accumulation
import protelis:state:nonselfstabilizing:time

import protelis:com:bbn:map:common

/**
 * Collect all of the ResourceReport objects for a region.
 * 
 * @return (Tuple<ResourceReport>) the reports for the region, will only be complete on the leader node
 * @param leader (boolean) true if this is node is the one to receive all of the reports
 * @param window (EstimationWindow) the window to estimate demand over
 */
def collectReports(leader, window) {
    let d = hopDistanceTo(leader);
    C(d, union, [self.getDevice().getResourceReport(window)], [])
}

/**
 * Collect all of the ServiceReport objects for a region.
 * 
 * @return (Tuple<ServiceReport>) the reports for the region, will only be complete on the leader node
 * @param leader (boolean) true if this is the one to receive all of the reports
 */
def collectServiceReports(leader) {
    let d = hopDistanceTo(leader);
    C(d, union, [self.getDevice().getServiceReport()], [])
}

/**
 * Make sure that all nodes in the region have the RLG plan.
 * 
 * @param rgn (RegionIdentifier) the region to work with
 * @param isRlgLeader (boolean) true if self is the RLG leader
 */
def disseminateRlgPlan(rgn, isRlgLeader) {
    let rlgPlan = self.getDevice().getNetworkState().getLoadBalancerPlan();
    let rlgBroadcastedPlan = broadcastObjectToRegion(rgn, isRlgLeader, rlgPlan);
    
    //self.getDevice().apTraceMessage("Storing RLG plan of type: " + rlgBroadcastedPlan.getClass());   
    self.getDevice().getNetworkState().setLoadBalancerPlan(rlgBroadcastedPlan)
}

/**
 * Make sure that all nodes in the region have the DCOP plan.
 * 
 * @param rgn (RegionIdentifier) the region to work with
 * @param isDcopLeader (boolean) true if self is the DCOP leader
 */
def disseminateDcopPlan(rgn, isDcopLeader) {
    let dcopPlan = self.getDevice().getNetworkState().getRegionPlan();
    let dcopBroadcastedPlan = broadcastObjectToRegion(rgn, isDcopLeader, dcopPlan);
    
   // self.getDevice().apTraceMessage("Storing DCOP plan of type: " + dcopBroadcastedPlan.getClass());   
    self.getDevice().getNetworkState().setRegionPlan(dcopBroadcastedPlan)
}

/**
 * Broadcast an object to all nodes in the specified region.
 * 
 * @param rgn (RegionIdentifier) the region 
 * @param isLeader (boolean) the leader node
 * @param obj (Object) the object to broadcast
 */
def broadcastObjectToRegion(rgn, isLeader, obj) {
    self.getDevice().apTraceMessage("Sending object to all nodes: " + obj + " leader: " + isLeader);
    multiRegion(rgn,{ n -> rgn == n },
        { 
            hopBroadcast(isLeader, obj)
        },
        obj)
}

/**
 * Share DCOP shared information to all regions and store it as needed.
 * 
 * @param isDcopLeader (boolean) if this node is running DCOP
 * @param rgn (RegionIdentifier) the region for this node
 */
def shareDcopInformation(rgn, isDcopLeader) = 
    if(self.getDevice().getDcopShareDirect()) {
        0   
    } else {
        let nbrRegions = findNeighborRegions(rgn, isDcopLeader);
        //self.getExecutionEnvironment().put("debug", nbrRegions);
        
        self.getDevice().apTraceMessage("shareDcopInformation rgn: " + rgn + " leader? " + isDcopLeader + " nbrRegions: " + nbrRegions);
        
        let dcopShares = multiInstance(nbrRegions,
            { key -> 
                hopBroadcast(isDcopLeader && key==rgn, mux(isDcopLeader && key==rgn) {
                    self.getDevice().getLocalDcopSharedInformation()
                }  else {
                    // default to empty Tuple specifying that there is no information for the region
                    // this value is filtered out in setAllDcopSharedInformation
                    []
                })
            },
            []);
            
        if(isDcopLeader) {
           // self.getDevice().apTraceMessage("Storing DCOP shared information of type: " + dcopShares.getClass());           
            self.getDevice().setAllDcopSharedInformation(dcopShares)  
        } else {
            // nothing to do, need dummy statement though
            0 
        }
    }

def mergeNetworkAvailableServicesProtelis(a, b) {
  let ret = mergeNetworkAvailableServices(a, b);
  //self.getDevice().apTraceMessage("calling mergeNetworkAvailableServices with " + a + " and " + b + " -> " + ret);
  ret
}

def shareDnsInformation() {
    let device = self.getDevice();
    
    let globalLeader = if(device.isUseLeaderElection()) { electLeader() } else { device.isGlobalLeader() };
    device.setGlobalLeader(globalLeader);
    
    let cResult = C(hopDistanceTo(globalLeader), 
                    mergeNetworkAvailableServicesProtelis, 
                    self.getDevice().getLocalNetworkAvailableServices(), 
                    nullNetworkAvailableServices());
                    
   // device.apDebugMessage("global leader is: " + globalLeader + " cResult is: " + cResult);
                                        
    let allServices = hopBroadcast(globalLeader,cResult);
    
  //  device.apTraceMessage("Storing all services of type: " + allServices.getClass());                      
    device.setAllNetworkAvailableServices(allServices) 
} 

/**
 * Collect the service reports and store them on the DNS node.
 * 
 * @param leader true if this node is a leader for the service reports sharing
 * @param rgn (RegionIdentifier) the region for this node
 */
def shareServiceReports(rgn, leader) {
    let serviceReports = multiRegion(rgn,{ n -> rgn == n }, {collectServiceReports(leader)},[]);
    
    if(leader) {
        self.getDevice().setRegionServiceReports(serviceReports)
    } else {
        // nothing to do, need a dummy statement though
        0
    }    
}

// HACK to get around bug in Protelis where a Java function doesn't work as the 2nd argument to the C operation
def totalDemandSum(a,b) = sumTotalDemand(a,b)

def computeTotalDemand() =
    self.getDevice().getAllServices()
    .map { service ->
        let leader = self.getDevice().isTotalDemandLeaderForService(service)
        let cResult = C(hopDistanceTo(leader),
                     totalDemandSum,
                     self.getDevice().getLocalTotalDemandForService(service),
                     nullTotalDemand())
        [leader, service, cResult]
    }
    .filter { it.get(0) }
    .map { self.getDevice().setTotalDemandForService(it.get(1), it.get(2)) }
    
    
// ---- main code

let neighbors = foldUnion([], nbr([self.getDevice().getNodeIdentifier()]));
self.getDevice().apDebugMessage("Neighbors protelis: " + neighbors + " java: " + self.getDevice().getNeighbors());

let rgn = self.getDevice().getRegionIdentifier();

let isDcopLeader = self.getDevice().isRunDCOP();
let isRlgLeader = self.getDevice().isRunRLG();
let isDnsHandler = self.getDevice().isHandleDnsChanges();

self.getDevice().apDebugMessage("Computing resource summaries");

// collect all ResourceReport objects for this region on the RLG node
// AP rounds: 1 regional network diameter
// Needed by: RLG
self.getDevice().apDebugMessage("Collecting resource reports for RLG");
let rlgReports = multiRegion(rgn,{ n -> rgn == n }, {collectReports(isRlgLeader, getShortEstimationWindow())},[]);
if(isRlgLeader) {
    self.getDevice().apTraceMessage("Storing RLG region resource reports of type: " + rlgReports.getClass());    
    self.getDevice().setRlgResourceReports(rlgReports)
}    

// collect all ResourceReport objects for this region on the DCOP node
// AP rounds: 1 regional network diameter
// Needed by: DCOP
self.getDevice().apDebugMessage("Collecting resource reports for DCOP");
let dcopReports = multiRegion(rgn,{ n -> rgn == n }, {collectReports(isDcopLeader, getLongEstimationWindow())},[]);
if(isDcopLeader) {
    self.getDevice().apTraceMessage("Storing DCOP region resource reports of type: " + dcopReports.getClass());    
    self.getDevice().setDcopResourceReports(dcopReports)
}    


// AP rounds: 1 regional network diameter
// Needed by: DNS leader to compute DNS records
self.getDevice().apDebugMessage("Calling shareServiceReports");
shareServiceReports(rgn, isDnsHandler);

// AP rounds: 1 regional network diameter
// Needed by: nodes to start containers, DNS leader to compute DNS records
self.getDevice().apDebugMessage("Calling disseminateRlgPlan");
disseminateRlgPlan(rgn, isRlgLeader);


// AP rounds: 1 regional network diameter
// Needed by: nodes to determine if they need to pull a new docker image, RLG leader to know when to start new services
self.getDevice().apDebugMessage("Calling disseminateDcopPlan");
disseminateDcopPlan(rgn, isDcopLeader);

// AP rounds: regional network diameter of this region + max(regional network diameter of all neighboring regions)
// Needed by: DCOP
self.getDevice().apDebugMessage("Calling shareDcopInformation");
shareDcopInformation(rgn, isDcopLeader);

// AP rounds: 2 x full network diameter
// Needed by: all nodes to associate network traffic with network flows
self.getDevice().apDebugMessage("Calling shareDnsInformation");
shareDnsInformation();

// AP rounds: full network diameter
// Needed by: DCOP
self.getDevice().apDebugMessage("Computing total demand");
computeTotalDemand();

// add some debugging output
self.getExecutionEnvironment().put("blue",self.getDevice().isRLGRunning());
self.getExecutionEnvironment().put("red",self.getDevice().isDCOPRunning());

self.getDevice().apDebugMessage("Protelis finished");

// Value to report for debugging purposes:
//[s.getRegion(), r.size() + " Reports", s.getServerCapacity()]
//[s.getRegion(), r.size() + " Reports", s.getServerLoad(), s.getNetworkLoad()]
[rgn]

//let report = self.getDevice().getResourceReport(getShortEstimationWindow());
//let d = report.getClientDemand();
//let c = report.getServerCapacity();
//[d,c,s]
